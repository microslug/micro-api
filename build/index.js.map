{"version":3,"sources":["../src/index.js"],"names":["require","config","app","use","req","res","next","header","bodyParser","urlencoded","extended","json","getIp","logger","info","cmd","isValidIP","then","ret","test","process","env","MICRO_URL","setTimeout","catch","err","console","log","listen","PORT"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEAA,QAAQ,QAAR,EAAkBC,MAAlB,G,CAPA;;;AASA,IAAMC,MAAM,wBAAZ;AACA;AACAA,IAAIC,GAAJ,CAAQ,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,gDAA3C;AACAD;AACD,CAJD;;AAMAJ,IAAIC,GAAJ,CAAQK,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAR,IAAIC,GAAJ,CAAQK,qBAAWG,IAAX,EAAR;;AAEA,2BAAOT,GAAP;;AAEA,IAAMU,QAAQ,SAARA,KAAQ,GAAM;AAChB;AACAC,iBAAOC,IAAP,CAAY,8BAAZ;AACA,MAAMC,yIAAN;AACA,MAAMC,YAAU,uDAAhB;AACA,oBAAMD,GAAN,EACGE,IADH,CACS,UAACC,GAAD,EAAS;AACd,QAAIF,UAAUG,IAAV,CAAeD,GAAf,CAAJ,EAAyB;AACvBE,cAAQC,GAAR,CAAYC,SAAZ,eAAkCJ,GAAlC;AACAL,qBAAOC,IAAP,4BAAqCM,QAAQC,GAAR,CAAYC,SAAjD;AACD,KAHD,MAGO;AACLC,iBAAW;AAAA,eAAMX,OAAN;AAAA,OAAX,EAAyB,IAAzB;AACD;AACF,GARH,EAUGY,KAVH,CAUU,UAAEC,GAAF;AAAA,WAAYC,QAAQC,GAAR,CAAY,gBAAZ,EAA6BF,GAA7B,CAAZ;AAAA,GAVV;AAWH,CAhBD;;AAkBA;AACAvB,IAAI0B,MAAJ,CAAWR,QAAQC,GAAR,CAAYQ,IAAvB,EAA6B,YAAM;AACjChB,iBAAOc,GAAP,CAAW,MAAX,gEAA+EP,QAAQC,GAAR,CAAYQ,IAA3F;;AAEAjB;AAED,CALD;;kBAOeV,G","file":"index.js","sourcesContent":["// entry point for mic.ro using using ES2015 syntax\nimport express from 'express'\nimport routes from './routes/microRoutes'\nimport bodyParser from 'body-parser'\nimport { logger } from './utils/logger';\nimport { shell } from './utils/shell';\n\nrequire('dotenv').config();\n\nconst app = express()\n// bodyparser setup\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nroutes(app);\n\nconst getIp = () => {\n    // get public ip\n    logger.info('Getting service public IP...');\n    const cmd = `kubectl get service micro-api-deployment -o json | jq -r '.status.loadBalancer.ingress[0].ip' | xargs | tr -d \"\\n\" | tr -d \"\\r\"`\n    const isValidIP=/^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/;\n    shell(cmd)\n      .then( (ret) => {\n        if (isValidIP.test(ret)) {\n          process.env.MICRO_URL = `http://${ret}`;\n          logger.info(`Setting env.MICRO_URL=${process.env.MICRO_URL}`);\n        } else {\n          setTimeout(() => getIp(),5000);\n        }\n      }\n  )\n      .catch( ( err ) =>  console.log('Command error ',err));\n}\n\n//Launch server\napp.listen(process.env.PORT, () => {\n  logger.log('info', `Mic.ro slug API serice has started and listening on port ${process.env.PORT}`);\n\n  getIp();\n\n})\n\nexport default app;\n"]}