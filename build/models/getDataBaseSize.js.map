{"version":3,"sources":["../../src/models/getDataBaseSize.js"],"names":["getDataBaseSize","db","logger","info","Promise","resolve","reject","get","then","reply","error","log"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAMO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,EAAD,EAAQ;AACrCC,iBAAOC,IAAP,CAAY,gCAAZ;AACA,SAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCL,OAAGM,GAAH,CAAO,aAAP,EAAsBC,IAAtB,CAA6B,UAACC,KAAD,EAAOC,KAAP,EAAiB;AAC5C,UAAIA,KAAJ,EAAW;AACTR,uBAAOQ,KAAP,CAAaA,KAAb;AACAJ,eAAOI,KAAP;AACD;AACDR,qBAAOS,GAAP,CAAW,MAAX,EAAkB,uBAAqBF,KAAvC;AACAJ,cAAQI,KAAR;AAED,KARD;AASD,GAVM,CAAP;AAWD,CAbM","file":"getDataBaseSize.js","sourcesContent":["import { logger } from '../utils/logger';\n/********************************************************************************\n *\n * Get destination URL\n *\n ********************************************************************************/\n\nexport const getDataBaseSize = (db) => {\n  logger.info('    SubModel: getDataBaseSize:');\n  return new Promise( (resolve,reject) => {\n    db.get('slugCounter').then ( (reply,error) => {\n      if (error) {\n        logger.error(error);\n        reject(error);\n      }\n      logger.log('info','getDataBaseSize = '+reply);\n      resolve(reply);\n\n    });\n  });\n};\n"]}