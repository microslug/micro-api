{"version":3,"sources":["../../src/models/slugCreator.js"],"names":["base62","generateSlug","db","url","logger","info","Promise","resolve","reject","get","then","counter","error","slug","counterToSlug","exists","set","process","env","SLUG_EXPIRY","status","console","log","err","message","incr","counterHash","hash","num_to_base62","length","n","Math","floor"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;AASA;AACA,IAAIA,SAAS,gEAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAMC,sCAAe,SAAfA,YAAe,CAACC,EAAD,EAAIC,GAAJ,EAAY;AACtCC,iBAAOC,IAAP,CAAY,sBAAZ,EAAmCF,GAAnC;AACA,SAAO,IAAIG,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCN,OAAGO,GAAH,CAAO,aAAP,EAAsBC,IAAtB,CAA6B,UAACC,OAAD,EAASC,KAAT,EAAmB;AAC9C,UAAIA,KAAJ,EAAW;AACTJ,eAAOI,KAAP;AACAR,uBAAOQ,KAAP,CAAa,yBAAb,EAAuCA,KAAvC;AACD;AACD,UAAIC,OAAOC,cAAcH,OAAd,CAAX;AACAT,SAAGa,MAAH,CAAUF,IAAV,EAAgBH,IAAhB,CAAuB,UAACK,MAAD,EAAY;AACjC,YAAI,CAACA,MAAL,EAAa;AACX;AACAb,aAAGc,GAAH,CAAOH,IAAP,EAAYV,GAAZ,EAAgB,IAAhB,EAAsBc,QAAQC,GAAR,CAAYC,WAAlC,EAA+CT,IAA/C,CAAsD,UAACU,MAAD,EAAQR,KAAR,EAAkB;AACtE,gBAAIA,KAAJ,EAAW;AACT,qBAAOS,QAAQC,GAAR,CAAY,SAAZ,EAAuBC,IAAIC,OAA3B,CAAP;AACD;AACDpB,2BAAOC,IAAP,CAAY,qCAAmCY,QAAQC,GAAR,CAAYC,WAA3D;AACAjB,eAAGuB,IAAH,CAAQ,aAAR,EAAuBf,IAAvB,CAA8B,UAACC,OAAD,EAASC,KAAT,EAAmB;AAC/CR,6BAAOC,IAAP,CAAY,gBAAcM,OAA1B;AACAJ,sBAAQM,IAAR;AACD,aAHD;AAID,WATD;AAUD,SAZD,MAYO;AACLT,yBAAOQ,KAAP,CAAa,sCAAb;AACAV,aAAGuB,IAAH,CAAQ,aAAR,EAAuBf,IAAvB,CAA8B,UAACC,OAAD,EAASC,KAAT,EAAmB;AAC/CR,2BAAOC,IAAP,CAAY,+CAAZ;AACAJ,yBAAaC,EAAb,EAAgBC,GAAhB;AACD,WAHD;AAIA,iBAAO,KAAP;AACD;AACF,OArBD;AAsBD,KA5BD;AA6BD,GA9BM,CAAP,CAFsC,CAgClC;AAEL,CAlCM;;AAqCP;;;;;;;AAOO,IAAMW,wCAAgB,SAAhBA,aAAgB,CAACH,OAAD,EAAa;AACxC,MAAMe,cAAcC,KAAKhB,OAAL,CAApB;AACA,MAAIE,OAAOe,cAAcF,WAAd,CAAX;AACA,SAAOb,KAAKgB,MAAL,GAAc,CAArB,EAAwB;AACtBhB,WAAOb,OAAO,CAAP,IAAYa,IAAnB;AACD;AACD,SAAOA,IAAP;AACD,CAPM;;AASP,SAASc,IAAT,CAAcG,CAAd,EAAiB;AACf;AACA,MAAMH,OAAQ,CAAE,CAAC,aAAaG,CAAd,KAAkB,EAAnB,KAA0B,CAA3B,KAAkC,CAAC,aAAaA,CAAd,MAAmB,EAArD,MAA8D,CAA5E;AACA,SAAOH,IAAP;AACD;;AAGD,SAASC,aAAT,CAAwBE,CAAxB,EACA;AACE,MAAKA,IAAI,EAAT,EAAc;AACZ,WAAOF,cAAcG,KAAKC,KAAL,CAAWF,IAAI,EAAf,CAAd,IAAoC9B,OAAO8B,IAAI,EAAX,CAA3C;AACD,GAFD,MAEO;AACL,WAAO9B,OAAO8B,CAAP,CAAP;AACD;AACF","file":"slugCreator.js","sourcesContent":["import { logger } from '../utils/logger';\n\n/********************************************************************************\n *\n * Generate a 6 charracter slug based on index from DB (dbKeySize)\n * where number of posible combinations is 56800235584 = 56,800,235,584\n * 7 char would be 3521614606208 = 3,521,614,606,208\n * 8 char 218340105584890 = 218,340,105,584,890\n *\n ********************************************************************************/\n\n// Referece string for base62 encoding. Scrambled to make a sequence look random\nlet base62 = 'mo3RnXcSN9wHLpE5r72VkIFJsM1KfUqQZiaAjBTlDydOut84gChv06GzPxebYW';\n\n// Scramble the digits helper\n// function randomsort(a, b) {\n// \treturn Math.random()>.5 ? -1 : 1;\n// }\n// base62 = base62.split('').sort(randomsort).join('');\n// console.log(base62, base62.split('').sort( (a,b) => {\n//     return a.toLowerCase().localeCompare(b.toLowerCase());\n// }).join(''));\n\nexport const generateSlug = (db,url) => {\n  logger.info('generateSlug: url = ',url);\n  return new Promise( (resolve,reject) => {\n    db.get('slugCounter').then ( (counter,error) => {\n      if (error) {\n        reject(error);\n        logger.error('Cannot get slugCounter ',error)\n      }\n      var slug = counterToSlug(counter);\n      db.exists(slug).then ( (exists) => {\n        if (!exists) {\n          // write slug and set expiry time\n          db.set(slug,url,'EX', process.env.SLUG_EXPIRY).then ( (status,error) => {\n            if (error) {\n              return console.log('Error: ', err.message);\n            }\n            logger.info('Slug added and set to expire in '+process.env.SLUG_EXPIRY)\n            db.incr('slugCounter').then ( (counter,error) => {\n              logger.info('Counter at '+counter)\n              resolve(slug);\n            });\n          });\n        } else {\n          logger.error('Duplicate key. Incrementing counter.');\n          db.incr('slugCounter').then ( (counter,error) => {\n            logger.info('Counter incremented after detecting duplicate');\n            generateSlug(db,url);\n          });\n          return false;\n        }\n      });\n    });\n  }); // Promise\n\n};\n\n\n/********************************************************************************\n *\n * Returns a hashed base62 number from an base10 counter\n * Counter is hashed by bitshifting to mask an obvious sequence\n * then converted to a base62 number\n ********************************************************************************/\n\nexport const counterToSlug = (counter) => {\n  const counterHash = hash(counter);\n  var slug = num_to_base62(counterHash);\n  while (slug.length < 6) {\n    slug = base62[0] + slug;\n  }\n  return slug;\n};\n\nfunction hash(n) {\n  // split in half and rotate bits each way then combine\n  const hash = ((((0x0000FFFF & n)<<16) >>>0) + (((0xFFFF0000 & n)>>>16)) >>> 0);\n  return hash;\n}\n\n\nfunction num_to_base62( n )\n{\n  if ( n > 62 ) {\n    return num_to_base62(Math.floor(n / 62)) + base62[n % 62];\n  } else {\n    return base62[n];\n  }\n}\n"]}