{"version":3,"sources":["../../src/controllers/microController.js"],"names":["apiHelp","req","res","console","log","apiDescription","setHeader","json","addNewURL","body","url","logger","error","indexOf","process","env","HOST","then","result","redirectSlugToUrl","info","params","slug","redirect","status","end","testPage","lookupDestination","Contact","DBresponse"],"mappings":";;;;;;;8QAAA;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACO,IAAMA,4BAAU,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AACnCC,UAAQC,GAAR,CAAY,sBAAZ,EAAmCC,8BAAnC;AACAH,MAAII,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAJ,MAAIK,IAAJ,CAASF,8BAAT;AACD,CAJM;;AAMA,IAAMG,gCAAY,SAAZA,SAAY,CAACP,GAAD,EAAMC,GAAN,EAAc;AACrC;AACA;AACA,MAAI,CAACD,IAAIQ,IAAJ,CAASC,GAAd,EAAmB;AACjBC,mBAAOC,KAAP,CAAa,oCAAb;AACAV,QAAIK,IAAJ,CAAS,EAACK,OAAO,wCAAR,EAAT;AACA;AACD;AACD,MAAIX,IAAIQ,IAAJ,CAASC,GAAT,CAAaG,OAAb,CAAqBC,QAAQC,GAAR,CAAYC,IAAjC,IAAyC,CAAC,CAA9C,EAAiD;AAC/CL,mBAAOC,KAAP,CAAa,oDAAb;AACAV,QAAIK,IAAJ,CAAS,EAACK,OAAO,yCAAR,EAAT;AACA;AACD;AACD,+BAAYX,IAAIQ,IAAJ,CAASC,GAArB,EACGO,IADH,CACS,UAACC,MAAD,EAAY;AACjBP,mBAAOP,GAAP,CAAW,MAAX,EAAkB,wBAAlB,EAA2Cc,MAA3C;AACAhB,QAAII,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAJ,QAAIK,IAAJ,CAASW,MAAT;AACD,GALH,EAKK,UAACN,KAAD,EAAW;AACZD,mBAAOC,KAAP,CAAa,eAAb,EAA6BA,KAA7B;AACA,QAAI,CAACA,KAAL,EAAY;AACVV,UAAII,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAJ,UAAIK,IAAJ,CAAS,EAACK,OAAO,yBAAR,EAAT;AACD;AACF,GAXH;AAaD,CA1BM;;AA4BA,IAAMO,gDAAoB,SAApBA,iBAAoB,CAAClB,GAAD,EAAMC,GAAN,EAAc;AAC7CS,iBAAOS,IAAP,CAAY,2CAAyCnB,IAAIoB,MAAJ,CAAWC,IAAhE;AACA,MAAMZ,MAAM,gCAAeT,IAAIoB,MAAJ,CAAWC,IAA1B,EACTL,IADS,CACH,UAACP,GAAD,EAAS;AACdC,mBAAOS,IAAP,CAAY,0CAAwCV,GAApD;AACAP,YAAQC,GAAR,QAAmBM,GAAnB,yCAAmBA,GAAnB;AACA,QAAIA,GAAJ,EAAS;AACPR,UAAIqB,QAAJ,CAAa,GAAb,EAAiBb,GAAjB;AACD,KAFD,MAEO;AACLR,UAAIsB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,sCAAmBxB,IAAIoB,MAAJ,CAAWC,IAA9B,CAApB;AACD;AAEF,GAVS,EAUP,UAACV,KAAD,EAAW;AACZD,mBAAOC,KAAP,CAAa,qBAAb,EAAmCA,KAAnC;AACA,QAAI,CAACA,KAAL,EAAY;AACVV,UAAIsB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,qDAApB;AACD;AACF,GAfS,CAAZ;AAgBD,CAlBM;AAmBA,IAAMC,8BAAW,SAAXA,QAAW,CAACzB,GAAD,EAAMC,GAAN,EAAc;AACpCA,MAAIuB,GAAJ,CAAQ,qCAAR;AACD,CAFM;;AAIA,IAAME,gDAAoB,SAApBA,iBAAoB,CAAC1B,GAAD,EAAMC,GAAN,EAAc;AAC7CC,UAAQC,GAAR,CAAY,iBAAZ,EAA+BwB,OAA/B,EAAuC,QAAvC,EAAgD3B,IAAIoB,MAAJ,CAAWC,IAA3D;AACA,MAAMO,aAAa,uBAAnB;AACA3B,MAAIK,IAAJ,CAASsB,UAAT;AACD,CAJM","file":"microController.js","sourcesContent":["// import redis\nimport { writeNewUrl, getUrlFromSlug } from '../models/microModel';\nimport { apiDescription } from '../docs/apiDescription';\nimport { logger } from '../utils/logger';\nimport { renderPageNotFound} from '../views/pageNotFound';\nimport { renderTestPage } from '../views/renderTestPage';\nimport { renderServiceNotAvailable } from '../views/serviceNotAvailable';\nexport const apiHelp = (req, res) => {\n  console.log('This is the api help',apiDescription);\n  res.setHeader('Content-Type', 'application/json');\n  res.json(apiDescription);\n};\n\nexport const addNewURL = (req, res) => {\n  // check req.body.url\n  // validation for missing or incorrect url\n  if (!req.body.url) {\n    logger.error('addNewUrl: missing destination url');\n    res.json({error: 'Missing key \"url\" with destination url'});\n    return;\n  }\n  if (req.body.url.indexOf(process.env.HOST) > -1) {\n    logger.error('addNewUrl: Destination url cannot be this service!');\n    res.json({error: 'Destination url cannot be this service!'});\n    return;\n  }\n  writeNewUrl(req.body.url)\n    .then ((result) => {\n      logger.log('info','writeNewUrl: result = ',result);\n      res.setHeader('Content-Type', 'application/json');\n      res.json(result);\n    }, (error) => {\n      logger.error('writeNewUrl: ',error);\n      if (!error) {\n        res.setHeader('Content-Type', 'application/json');\n        res.json({error: 'Database not available.'});\n      }\n    }\n    );\n};\n\nexport const redirectSlugToUrl = (req, res) => {\n  logger.info('Controller: redirectSlugToUrl: slug = '+req.params.slug);\n  const url = getUrlFromSlug(req.params.slug)\n    .then( (url) => {\n      logger.info('Controller: redirectSlugToUrl: url = '+url);\n      console.log(typeof url);\n      if (url) {\n        res.redirect(301,url)\n      } else {\n        res.status(404).end(renderPageNotFound(req.params.slug));\n      }\n\n    }, (error) => {\n      logger.error('redirectSlugToUrl: ',error);\n      if (!error) {\n        res.status(503).end(renderServiceNotAvailable());\n      }\n    });\n};\nexport const testPage = (req, res) => {\n  res.end(renderTestPage());\n};\n\nexport const lookupDestination = (req, res) => {\n  console.log('reading from db' ,Contact,' with ',req.params.slug);\n  const DBresponse = 'fake response from DB';\n  res.json(DBresponse);\n};\n"]}