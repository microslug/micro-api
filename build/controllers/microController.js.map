{"version":3,"sources":["../../src/controllers/microController.js"],"names":["apiHelp","req","res","setHeader","json","apiDescription","addNewURL","body","url","logger","error","indexOf","process","env","HOST","then","result","log","redirectSlugToUrl","info","params","slug","redirect","status","end","testPage","lookupDestination","DBresponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AANA;AAOO,IAAMA,4BAAU,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AACnCA,MAAIC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAD,MAAIE,IAAJ,CAASC,8BAAT;AACD,CAHM;;AAKA,IAAMC,gCAAY,SAAZA,SAAY,CAACL,GAAD,EAAMC,GAAN,EAAc;AACrC;AACA;AACA,MAAI,CAACD,IAAIM,IAAJ,CAASC,GAAd,EAAmB;AACjBC,mBAAOC,KAAP,CAAa,oCAAb;AACAR,QAAIE,IAAJ,CAAS,EAACM,OAAO,wCAAR,EAAT;AACA;AACD;AACD,MAAIT,IAAIM,IAAJ,CAASC,GAAT,CAAaG,OAAb,CAAqBC,QAAQC,GAAR,CAAYC,IAAjC,IAAyC,CAAC,CAA9C,EAAiD;AAC/CL,mBAAOC,KAAP,CAAa,oDAAb;AACAR,QAAIE,IAAJ,CAAS,EAACM,OAAO,yCAAR,EAAT;AACA;AACD;AACD,+BAAYT,IAAIM,IAAJ,CAASC,GAArB,EACGO,IADH,CACS,UAACC,MAAD,EAAY;AACjBP,mBAAOQ,GAAP,CAAW,MAAX,EAAkB,wBAAlB,EAA2CD,MAA3C;AACAd,QAAIC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAD,QAAIE,IAAJ,CAASY,MAAT;AACD,GALH,EAKK,UAACN,KAAD,EAAW;AACZD,mBAAOC,KAAP,CAAa,eAAb,EAA6BA,KAA7B;AACA,QAAI,CAACA,KAAL,EAAY;AACVR,UAAIC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAD,UAAIE,IAAJ,CAAS,EAACM,OAAO,yBAAR,EAAT;AACD;AACF,GAXH;AAaD,CA1BM;;AA4BA,IAAMQ,gDAAoB,SAApBA,iBAAoB,CAACjB,GAAD,EAAMC,GAAN,EAAc;AAC7CO,iBAAOU,IAAP,CAAY,2CAAyClB,IAAImB,MAAJ,CAAWC,IAAhE;AACA,MAAMb,MAAM,gCAAeP,IAAImB,MAAJ,CAAWC,IAA1B,EACTN,IADS,CACH,UAACP,GAAD,EAAS;AACdC,mBAAOU,IAAP,CAAY,0CAAwCX,GAApD;AACA,QAAIA,GAAJ,EAAS;AACPN,UAAIoB,QAAJ,CAAa,GAAb,EAAiBd,GAAjB;AACD,KAFD,MAEO;AACLN,UAAIqB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,sCAAmBvB,IAAImB,MAAJ,CAAWC,IAA9B,CAApB;AACD;AAEF,GATS,EASP,UAACX,KAAD,EAAW;AACZD,mBAAOC,KAAP,CAAa,qBAAb,EAAmCA,KAAnC;AACA,QAAIA,KAAJ,EAAW;AACTR,UAAIqB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,qDAApB;AACD;AACF,GAdS,CAAZ;AAeD,CAjBM;;AAmBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAMC,8BAAW,SAAXA,QAAW,CAACxB,GAAD,EAAMC,GAAN,EAAc;AACpCA,MAAIsB,GAAJ,CAAQ,qCAAR;AACD,CAFM;;AAIA,IAAME,gDAAoB,SAApBA,iBAAoB,CAACzB,GAAD,EAAMC,GAAN,EAAc;AAC7C,MAAMyB,aAAa,uBAAnB;AACAzB,MAAIE,IAAJ,CAASuB,UAAT;AACD,CAHM","file":"microController.js","sourcesContent":["// import redis\nimport { writeNewUrl, getUrlFromSlug } from '../models/microModel';\nimport { apiDescription } from '../docs/apiDescription';\nimport { logger } from '../utils/logger';\nimport { renderPageNotFound} from '../views/pageNotFound';\nimport { renderTestPage } from '../views/renderTestPage';\nimport { renderServiceNotAvailable } from '../views/serviceNotAvailable';\nexport const apiHelp = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.json(apiDescription);\n};\n\nexport const addNewURL = (req, res) => {\n  // check req.body.url\n  // validation for missing or incorrect url\n  if (!req.body.url) {\n    logger.error('addNewUrl: missing destination url');\n    res.json({error: 'Missing key \"url\" with destination url'});\n    return;\n  }\n  if (req.body.url.indexOf(process.env.HOST) > -1) {\n    logger.error('addNewUrl: Destination url cannot be this service!');\n    res.json({error: 'Destination url cannot be this service!'});\n    return;\n  }\n  writeNewUrl(req.body.url)\n    .then ((result) => {\n      logger.log('info','writeNewUrl: result = ',result);\n      res.setHeader('Content-Type', 'application/json');\n      res.json(result);\n    }, (error) => {\n      logger.error('writeNewUrl: ',error);\n      if (!error) {\n        res.setHeader('Content-Type', 'application/json');\n        res.json({error: 'Database not available.'});\n      }\n    }\n    );\n};\n\nexport const redirectSlugToUrl = (req, res) => {\n  logger.info('Controller: redirectSlugToUrl: slug = '+req.params.slug);\n  const url = getUrlFromSlug(req.params.slug)\n    .then( (url) => {\n      logger.info('Controller: redirectSlugToUrl: url = '+url);\n      if (url) {\n        res.redirect(301,url)\n      } else {\n        res.status(404).end(renderPageNotFound(req.params.slug));\n      }\n\n    }, (error) => {\n      logger.error('redirectSlugToUrl: ',error);\n      if (error) {\n        res.status(503).end(renderServiceNotAvailable());\n      }\n    });\n};\n\n// export const status = (req, res) => {\n//   getStatus()\n//     .then ((result) => {\n//       logger.log('info','getStatus: result = ',result);\n//       res.setHeader('Content-Type', 'application/json');\n//       res.json(result);\n//     }, (error) => {\n//       logger.error('Status: ',error);\n//       if (error) {\n//         res.setHeader('Content-Type', 'application/json');\n//         res.json({error: 'Database not available.'});\n//       }\n//     }\n//     );\n// };\n\nexport const testPage = (req, res) => {\n  res.end(renderTestPage());\n};\n\nexport const lookupDestination = (req, res) => {\n  const DBresponse = 'fake response from DB';\n  res.json(DBresponse);\n};\n"]}