{"version":3,"sources":["../../src/controllers/microController.js"],"names":["apiHelp","req","res","setHeader","json","apiDescription","dbNotAvailResponse","error","addNewURL","body","url","logger","indexOf","process","env","HOST","then","result","log","redirectSlugToUrl","info","params","slug","redirect","status","end","size","testPage","lookupDestination","makeSlug","counter"],"mappings":"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","file":"microController.js","sourcesContent":["// import redis\nimport { writeNewUrl, getUrlFromSlug, getSize } from '../models/microModel';\nimport { apiDescription } from '../docs/apiDescription';\nimport { logger } from '../utils/logger';\nimport { renderPageNotFound} from '../views/pageNotFound';\nimport { renderTestPage } from '../views/renderTestPage';\nimport { renderServiceNotAvailable } from '../views/serviceNotAvailable';\nimport { counterToSlug } from '../models/slugCreator';\n\nexport const apiHelp = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.json(apiDescription);\n};\n\nconst dbNotAvailResponse = (res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.json({error: 'Database not available.'});\n  return;\n}\n\nexport const addNewURL = (req, res) => {\n  // check req.body.url\n  // validation for missing or incorrect url\n  if (!req.body.url) {\n    logger.error('addNewUrl: missing destination url');\n    res.json({error: 'Missing key \"url\" with destination url'});\n    return;\n  }\n  if (req.body.url.indexOf(process.env.HOST) > -1) {\n    logger.error('addNewUrl: Destination url cannot be this service!');\n    res.json({error: 'Destination url cannot be this service!'});\n    return;\n  }\n  writeNewUrl(req.body.url)\n    .then ((result) => {\n      logger.log('info','writeNewUrl: result = ',result);\n      res.setHeader('Content-Type', 'application/json');\n      res.json(result);\n    }, (error) => {\n      logger.error('writeNewUrl: ',error);\n      if (!error) {\n        dbNotAvailResponse(res);\n      }\n    }\n    );\n};\n\nexport const redirectSlugToUrl = (req, res) => {\n  logger.info('Controller: redirectSlugToUrl: slug = '+req.params.slug);\n  const url = getUrlFromSlug(req.params.slug)\n    .then( (url) => {\n      logger.info('Controller: redirectSlugToUrl: url = '+url);\n      if (url) {\n        res.redirect(301,url)\n      } else {\n        res.status(404).end(renderPageNotFound(req.params.slug));\n      }\n\n    }, (error) => {\n      logger.error('redirectSlugToUrl: ',error);\n      if (!error) {\n        res.status(503).end(renderServiceNotAvailable());\n      }\n    });\n};\n\nexport const size = (req, res) => {\n  logger.info('Controller: size: ');\n  getSize()\n    .then ((result) => {\n      logger.log('info','getSize: result = ',result);\n      res.setHeader('Content-Type', 'application/json');\n      res.json(result);\n    }, (error) => {\n      logger.error('Controller: size:  ',error);\n      if (!error) {\n        dbNotAvailResponse(res);\n      }\n    }\n    );\n};\n\nexport const testPage = (req, res) => {\n  res.end(renderTestPage());\n};\n\nexport const lookupDestination = (req, res) => {\n  logger.info('Controller: lookupDestination: ');\n  if (req.params.slug) {\n    getUrlFromSlug(req.params.slug)\n    .then( (url) => {\n      logger.info('Controller: lookupDestination: url = '+url);\n      if (url) {\n        res.setHeader('Content-Type', 'application/json');\n        res.json({url: url});\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.json({error: 'slug not found.'});\n      }\n\n    }, (error) => {\n      logger.error('lookupDestination: ',error);\n      if (!error) {\n        dbNotAvailResponse(res);\n      }\n    });\n  } else {\n    res.setHeader('Content-Type', 'application/json');\n    res.json({error: 'Slug not provided'});\n  }\n};\n\nexport const makeSlug = (req, res) => {\n  if (req.params.counter) {\n    const slug = counterToSlug(req.params.counter);\n    res.setHeader('Content-Type', 'application/json');\n    res.json({slug: slug});\n  } else {\n    res.setHeader('Content-Type', 'application/json');\n    res.json({error: 'Counter not provided'});\n  }\n};\n"]}