{"version":3,"sources":["../../src/models/initDB.js"],"names":["require","config","promiseFactory","promise","redis","client","process","env","REDISTOGO_URL","rtg","parse","createClient","host","hostname","port","auth","split","K8SPASSWORD","console","log","REDIS_HOST","REDIS_PORT","password","dbConnected","on","logger","err","error","get","then","reply","message","dbKeySize","send_command","db"],"mappings":";;;;;;;AAMA;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB,G,CAPA;;;;;;AASA,IAAIC,iBAAiBF,QAAQ,MAAR,EAAgBG,OAArC;AAAA,IACEC,QAAQJ,QAAQ,eAAR,EAAyBE,cAAzB,CADV;;AAGA,IAAIG,eAAJ;;AAEA,IAAIC,QAAQC,GAAR,CAAYC,aAAhB,EAA+B;AAC7B;AACA,MAAMC,MAAMT,QAAQ,KAAR,EAAeU,KAAf,CAAqBJ,QAAQC,GAAR,CAAYC,aAAjC,CAAZ;AACAH,WAASD,MAAMO,YAAN,CAAmB;AAC1BC,UAAMH,IAAII,QADgB;AAE1BC,UAAML,IAAIK;AAFgB,GAAnB,CAAT;AAIAT,SAAOU,IAAP,CAAYN,IAAIM,IAAJ,CAASC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAZ;AACD,CARD,MAQO,IAAIV,QAAQC,GAAR,CAAYU,WAAhB,EAA6B;AAClC;AACAC,UAAQC,GAAR,CAAY,SAAZ;AACAd,WAASD,MAAMO,YAAN,CAAmB;AAC1BC,UAAMN,QAAQC,GAAR,CAAYa,UADQ;AAE1BN,UAAMR,QAAQC,GAAR,CAAYc,UAFQ;AAG1BC,cAAUhB,QAAQC,GAAR,CAAYU;AAHI,GAAnB,CAAT;AAKD,CARM,MAQA;AACL;AACAZ,WAASD,MAAMO,YAAN,CAAmB;AAC1BC,UAAMN,QAAQC,GAAR,CAAYa,UADQ;AAE1BN,UAAMR,QAAQC,GAAR,CAAYc;AAFQ,GAAnB,CAAT;AAID;;AAEM,IAAIE,oCAAc,KAAlB;;AAEPlB,OAAOmB,EAAP,CAAU,SAAV,EAAqB,YAAM;AACzB,UAHSD,WAGT,iBAAc,IAAd;AACAE,iBAAON,GAAP,CAAW,MAAX,EAAkB,yBAAlB;AACD,CAHD;AAIAd,OAAOmB,EAAP,CAAU,OAAV,EAAmB,UAACE,GAAD,EAAS;AAC1B,UAPSH,WAOT,iBAAc,KAAd;AACAE,iBAAOE,KAAP,CAAa,0BAAb,EAAwCD,GAAxC;AACD,CAHD;;AAMArB,OAAOuB,GAAP,CAAW,aAAX,EAA0BC,IAA1B,CAAiC,UAACC,KAAD,EAAOH,KAAP,EAAiB;AAChD,MAAIA,KAAJ,EAAW;AACT,WAAOT,QAAQC,GAAR,CAAY,SAAZ,EAAuBO,IAAIK,OAA3B,CAAP;AACD;AACDN,iBAAON,GAAP,CAAW,MAAX,EAAkB,yBAAuBW,KAAzC;AACD,CALD;;AAOO,IAAIE,gCAAY,IAAhB;;AAGP3B,OAAO4B,YAAP,CAAqB,QAArB,EAA+BJ,IAA/B,CAAsC,UAACC,KAAD,EAAOH,KAAP,EAAiB;AACrD,MAAIA,KAAJ,EAAW;AACT,WAAOT,QAAQC,GAAR,CAAY,SAAZ,EAAuBO,IAAIK,OAA3B,CAAP;AACD;AACD,UAPSC,SAOT,eAAYF,KAAZ;AACD,CALD;AAMO,IAAMI,kBAAK7B,MAAX","file":"initDB.js","sourcesContent":["/********************************************************************************\n *\n * Initialize Redis DB\n *\n ********************************************************************************/\n\nimport { logger } from '../utils/logger';\nrequire('dotenv').config();\n\nvar promiseFactory = require('when').promise,\n  redis = require('promise-redis')(promiseFactory);\n\nlet client;\n\nif (process.env.REDISTOGO_URL) {\n  // heroku\n  const rtg = require('url').parse(process.env.REDISTOGO_URL);\n  client = redis.createClient({\n    host: rtg.hostname,\n    port: rtg.port,\n  });\n  client.auth(rtg.auth.split(':')[1]);\n} else if (process.env.K8SPASSWORD) {\n  // kubernetes\n  console.log('got K8S');\n  client = redis.createClient({\n    host: process.env.REDIS_HOST,\n    port: process.env.REDIS_PORT,\n    password: process.env.K8SPASSWORD\n  });\n} else {\n  // local\n  client = redis.createClient({\n    host: process.env.REDIS_HOST,\n    port: process.env.REDIS_PORT,\n  });\n}\n\nexport let dbConnected = false;\n\nclient.on('connect', () => {\n  dbConnected = true;\n  logger.log('info','Redis client connected.');\n});\nclient.on('error', (err) => {\n  dbConnected = false;\n  logger.error('Unable to connect to DB ',err);\n});\n\n\nclient.get('slugCounter').then ( (reply,error) => {\n  if (error) {\n    return console.log('Error: ', err.message);\n  }\n  logger.log('info','Database key size = '+reply);\n});\n\nexport let dbKeySize = null;\n\n\nclient.send_command( 'dbsize').then ( (reply,error) => {\n  if (error) {\n    return console.log('Error: ', err.message);\n  }\n  dbKeySize = reply;\n});\nexport const db = client;\n"]}