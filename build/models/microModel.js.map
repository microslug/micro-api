{"version":3,"sources":["../../src/models/microModel.js"],"names":["writeNewUrl","url","dbConnected","Promise","reject","logger","info","resolve","db","then","slug","reply","microURL","process","env","PROTOCOL","HOST","PORT","destinationURL","write","catch","getUrlFromSlug","error"],"mappings":";;;;;;;AASA;;AACA;;AACA;;AACA;;AAZA;;;;;;;;AAiBO,IAAMA,oCAAc,SAAdA,WAAc,CAACC,GAAD,EAAS;AAClC,MAAI,CAACC,mBAAL,EAAkB,OAAOC,QAAQC,MAAR,CAAe,KAAf,CAAP;AAClBC,iBAAOC,IAAP,CAAY,0BAAwBL,GAApC;AACA,SAAO,IAAIE,OAAJ,CAAa,UAACI,OAAD,EAASH,MAAT,EAAoB;AACtC,mCAAaI,UAAb,EAAgBP,GAAhB,EACGQ,IADH,CACQ,UAACC,IAAD,EAAS;AACbL,qBAAOC,IAAP,CAAY,gCAA8BI,IAA1C;AACA,UAAMC,QAAQ;AACZC,uBAAaC,QAAQC,GAAR,CAAYC,QAAzB,GAAoCF,QAAQC,GAAR,CAAYE,IAAhD,SAAwDH,QAAQC,GAAR,CAAYG,IAApE,SAA4EP,IADhE;AAEZQ,wBAAgBjB,GAFJ;AAGZS,kBAHY;AAIZS,eAAO;AAJK,OAAd;AAMAZ,cAASI,KAAT;AACD,KAVH,EAWGS,KAXH,CAWS,UAACT,KAAD,EAAW;AAChBN,qBAAOC,IAAP,CAAY,wCAAsCK,KAAlD;AACAP,aAAQ,oBAAR,EAA6BO,KAA7B;AACD,KAdH;AAeD,GAhBM,CAAP;AAiBD,CApBM;;AAsBP;AACO,IAAMU,0CAAiB,SAAjBA,cAAiB,CAACX,IAAD,EAAU;AACtC;AACAL,iBAAOC,IAAP,CAAY,oCAAkCI,IAA9C;AACA,MAAI,CAACR,mBAAL,EAAkB,OAAOC,QAAQC,MAAR,CAAe,KAAf,CAAP;AAClB,SAAO,IAAID,OAAJ,CAAa,UAACI,OAAD,EAASH,MAAT,EAAoB;AACtC,QAAMH,MAAM,0CAAkBO,UAAlB,EAAqBE,IAArB,EACTD,IADS,CACJ,UAACR,GAAD,EAAQ;AACZI,qBAAOC,IAAP,CAAY,kCAAgCL,GAA5C;AACAM,cAASN,GAAT;AACD,KAJS;AAKV;AALU,KAMTmB,KANS,CAMH,UAACnB,GAAD,EAAS;AACdI,qBAAOiB,KAAP,CAAa,kCAAgCrB,GAA7C;AACAA,YAAM,KAAN;AACAM,cAAQN,GAAR;AACD,KAVS,CAAZ;AAWD,GAZM,CAAP;AAaD,CAjBM","file":"microModel.js","sourcesContent":["/********************************************************************************\n *\n * Models\n * our Schema\n * --slug\n * --destination\n ********************************************************************************/\n\n\nimport { db, dbConnected } from './initDB';\nimport { generateSlug } from './slugCreator';\nimport { logger } from '../utils/logger';\nimport { getDestinationUrl } from './getDestinationUrl';\n\n\n\n\nexport const writeNewUrl = (url) => {\n  if (!dbConnected) return Promise.reject(false);\n  logger.info('writeNewUrl: Writing '+url);\n  return new Promise( (resolve,reject) => {\n    generateSlug(db,url)\n      .then((slug) =>{\n        logger.info('generateSlug: Got new slug '+slug);\n        const reply = {\n          microURL: `${process.env.PROTOCOL}${process.env.HOST}:${process.env.PORT}/${slug}`,\n          destinationURL: url,\n          slug,\n          write: 'ok'\n        };\n        resolve (reply);\n      })\n      .catch((reply) => {\n        logger.info('generateSlug: unable to write slug '+reply);\n        reject ('writeNewUrl: fail ',reply);\n      });\n  });\n};\n\n// Always returns a URL!!\nexport const getUrlFromSlug = (slug) => {\n  //console.log('getUrlFromSlug, Database size: ',dbKeySize);\n  logger.info('  Model: getUrlFromSlug: slug ='+slug);\n  if (!dbConnected) return Promise.reject(false);\n  return new Promise( (resolve,reject) => {\n    const url = getDestinationUrl(db,slug)\n      .then((url) =>{\n        logger.info('  Model: getUrlFromSlug: url='+url);\n        resolve (url);\n      })\n      // FIX this!!\n      .catch((url) => {\n        logger.error('  Model: getUrlFromSlug: url='+url);\n        url = 'bad';\n        resolve(url);\n      });\n  });\n};\n"]}